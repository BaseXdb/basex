# This property file specifies code completions for the GUI editor.
#
# The string specified as key will be replaced with the assigned value.
# An underscore in the value specifies where the cursor will be located.

ancestor=ancestor::
ancestororself=ancestor-or-self::
aos=ancestor-or-self::
attribute=attribute()
child=child::
cl=console.log(_);\n
comment=comment()
contains=contains text
ct=contains text
context=declare context value := _;\n
copy=copy $_ := \nmodify \nreturn \n
delete=delete node _
descendant=descendant::
declarearray=declare namespace array = 'http://www.w3.org/2005/xpath-functions/array';\n
declaremap=declare namespace map = 'http://www.w3.org/2005/xpath-functions/map';\n
declareoutput=declare namespace output = 'http://www.w3.org/2010/xslt-xquery-serialization';\n
declarenamespace=declare namespace _ = '';\n
declareoption=declare option _ '';\n
declareoptionoutput=declare option output:_ '';\n
dn=declare namespace _ = '';\n
dna=declare namespace array = 'http://www.w3.org/2005/xpath-functions/array';\n
dnp=declare namespace map = 'http://www.w3.org/2005/xpath-functions/map';\n
dno=declare namespace output = 'http://www.w3.org/2010/xslt-xquery-serialization';\n
do=declare option _ '';\n
doo=declare option output:_ '';\n
document-node=document-node()
descendantorself=descendant-or-self::
dos=descendant-or-self::
element=element()
every=every $_ in \nsatisfies 
following=following::
followingsibling=following-sibling::
for=for $_ in \nreturn 
fs=following-sibling::
function=declare function _() {\n};\n
import=import module namespace _ = '';\n
insert=insert node _ into 
let=let $_ := \nreturn 
module=module namespace _ = '';\n
option=declare option _ '';\n
parent=parent::
pi=processing-instruction()
preceding=preceding::
precrdingsibling=preceding-sibling::
processinginstruction=processing-instruction()
ps=preceding-sibling::
record=declare record _();\n
rename=rename node _ as  
replace=replace node _ with  
sliding=for sliding window _ in \nstart when \nreturn 
some=some $_ in \nsatisfies  
switch=switch (_) {\n  case  return \n  default return \n}
text=text()
try=try {_\n} catch * {\n}
tumbling=for tumbling window _ in \nstart when \nreturn 
typeswitch=typeswitch (_) {\n  case  return \n  default return \n}
update=update {_\n}\n
variable=declare variable $_ := ;\n
